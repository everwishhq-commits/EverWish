// /lib/animations.js
"use client";
import { motion } from "framer-motion";
import { useEffect, useMemo, useState } from "react";

/** üóÇÔ∏è Cat√°logo de sub-animaciones (10 por categor√≠a) */
const CATALOG = {
  easter: [
    "Flowers üå∏","Bunnies üê∞","Eggs ü•ö","Chicks üê£","Butterflies ü¶ã",
    "Grass üåø","Sun ‚òÄÔ∏è","Clouds ‚òÅÔ∏è","Carrots ü•ï","Basket üß∫",
  ],
  halloween: [
    "Pumpkins üéÉ","Ghosts üëª","Candies üç¨","Bats ü¶á","Skulls üíÄ",
    "Spiders üï∑Ô∏è","Webs üï∏Ô∏è","Bones ü¶¥","Lanterns ü™î","Moons üåô",
  ],
  july4: [
    "Fireworks üéÜ","Flags üá∫üá∏","Stars ‚≠ê","Eagles ü¶Ö","Hearts ‚ù§Ô∏è",
    "Balloons üéà","Sparkles ‚ú®","Lights üí°","Parade üéâ","Confetti üéä",
  ],
  animals: [
    "Paw Prints üêæ","Dogs üê∂","Cats üê±","Bones ü¶¥","Balls üéæ",
    "Fish üêü","Birds üê¶","Hearts ‚ù§Ô∏è","Bowls ü•£","Stars ‚ú®",
  ],
  love: [
    "Hearts ‚ù§Ô∏è","Kisses üíã","Roses üåπ","Rings üíç","Cupid üèπ",
    "Stars ‚ú®","Balloons üéà","Gifts üéÅ","Doves üïäÔ∏è","Music üé∂",
  ],
  default: [
    "Stars ‚ú®","Moons üåô","Clouds ‚òÅÔ∏è","Lights üí°","Dreams üåà",
    "Sparkles ‚ú®","Hearts ‚ù§Ô∏è","Balloons üéà","Doves üïäÔ∏è","Gifts üéÅ",
  ],
};

/** üîé slug -> categor√≠a */
export function getAnimationsForSlug(slug = "") {
  const s = (slug || "").toLowerCase();
  if (s.includes("easter")) return "easter";
  if (s.includes("halloween") || s.includes("ghost")) return "halloween";
  if (s.includes("july") || s.includes("4th")) return "july4";
  if (s.includes("animal") || s.includes("pet")) return "animals";
  if (s.includes("love") || s.includes("valentine")) return "love";
  return "default";
}

/** üìã opciones visibles del dropdown (10) */
export function getAnimationOptionsForSlug(slug) {
  const cat = getAnimationsForSlug(slug);
  return CATALOG[cat] || CATALOG.default;
}

/** üé≠ mapea opci√≥n ‚Üí set de emojis coherente */
function optionToEmojis(optionLabel) {
  const key = optionLabel?.toLowerCase() || "";
  if (key.includes("bunn")) return ["üê∞","üêá","ü•ï","üå∏"];
  if (key.includes("egg")) return ["ü•ö","üå∏","üê£"];
  if (key.includes("chick")) return ["üê£","üåº","üå∑"];
  if (key.includes("butterf")) return ["ü¶ã","üå∏"];
  if (key.includes("grass")) return ["üåø","üå±"];
  if (key.includes("sun")) return ["‚òÄÔ∏è","‚ú®"];
  if (key.includes("cloud")) return ["‚òÅÔ∏è","üå§Ô∏è"];
  if (key.includes("carrot")) return ["ü•ï","üåø"];

  if (key.includes("pumpkin")) return ["üéÉ","üï∏Ô∏è"];
  if (key.includes("ghost")) return ["üëª","‚ú®"];
  if (key.includes("candie")||key.includes("candy")) return ["üç¨","üç≠"];
  if (key.includes("bat")) return ["ü¶á","üåô"];
  if (key.includes("skull")) return ["üíÄ","üïØÔ∏è"];
  if (key.includes("spider")) return ["üï∑Ô∏è","üï∏Ô∏è"];
  if (key.includes("web")) return ["üï∏Ô∏è","üï∑Ô∏è"];
  if (key.includes("bone")) return ["ü¶¥","üíÄ"];
  if (key.includes("lantern")) return ["ü™î","‚ú®"];
  if (key.includes("moon")) return ["üåô","‚ú®"];

  if (key.includes("firework")) return ["üéÜ","üéá","‚ú®"];
  if (key.includes("flag")) return ["üá∫üá∏","‚≠ê"];
  if (key.includes("star")) return ["‚≠ê","‚ú®"];
  if (key.includes("eagle")) return ["ü¶Ö","‚≠ê"];
  if (key.includes("balloon")) return ["üéà","‚ú®"];
  if (key.includes("sparkle")) return ["‚ú®","‚≠ê"];
  if (key.includes("light")) return ["üí°","‚ú®"];
  if (key.includes("parade")||key.includes("confetti")) return ["üéâ","üéä"];

  if (key.includes("paw")) return ["üêæ","üêæ","üêæ"];
  if (key.includes("dog")) return ["üê∂","üêæ"];
  if (key.includes("cat")) return ["üê±","üêæ"];
  if (key.includes("fish")) return ["üêü","üíß"];
  if (key.includes("bird")) return ["üê¶","‚ú®"];
  if (key.includes("bowl")) return ["ü•£","üêæ"];

  if (key.includes("heart")) return ["‚ù§Ô∏è","üíñ","üíò"];
  if (key.includes("kiss")) return ["üíã","üíñ"];
  if (key.includes("rose")) return ["üåπ","üíñ"];
  if (key.includes("ring")) return ["üíç","üíñ"];
  if (key.includes("cupid")) return ["üèπ","üíò"];
  if (key.includes("dove")) return ["üïäÔ∏è","üíñ"];
  if (key.includes("music")) return ["üé∂","üíñ"];

  // gen√©rico
  return ["‚ú®","‚≠ê","üåü"];
}

/** ‚ú® Overlay de part√≠culas (arranca YA y cambia r√°pido) */
export function AnimationOverlay({ slug, animation }) {
  const [items, setItems] = useState([]);
  const emojis = useMemo(() => optionToEmojis(animation), [animation]);

  // fuerza remount al cambiar opci√≥n ‚Üí cambio inmediato
  const key = useMemo(() => `${slug}-${animation}`, [slug, animation]);

  useEffect(() => {
    const total = 18;
    const list = Array.from({ length: total }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: 110 + Math.random() * 40, // arranca fuera de pantalla para evitar "pop"
      delay: Math.random() * 0.4,  // aparici√≥n r√°pida
      dur: 16 + Math.random() * 8, // lento y suave
      size: 18 + Math.random() * 14,
      rot: Math.random() * 20 - 10,
      emoji: emojis[i % emojis.length],
    }));
    setItems(list);
  }, [key, emojis]);

  return (
    <div key={key} className="pointer-events-none fixed inset-0 z-[300] overflow-hidden">
      {items.map((p) => (
        <motion.span
          key={p.id}
          className="absolute select-none"
          style={{ left: `${p.x}%`, top: `${p.y}vh`, fontSize: p.size }}
          initial={{ opacity: 0, y: 0, scale: 0.9 }}
          animate={{
            opacity: [0.2, 0.8, 0.3],
            y: ["0vh", "-130vh"],
            rotate: [0, p.rot, -p.rot, 0],
            scale: [0.9, 1, 0.95],
          }}
          transition={{
            duration: p.dur,
            delay: p.delay,
            repeat: Infinity,
            ease: "easeInOut",
          }}
        >
          {p.emoji}
        </motion.span>
      ))}
    </div>
  );
    }
