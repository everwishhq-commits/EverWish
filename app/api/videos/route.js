export const runtime = "nodejs"; // üöÄ Ejecutar en Node.js en Vercel

import fs from "fs";
import path from "path";

export async function GET() {
  try {
    // üìÇ Carpeta donde est√°n los videos (.mp4)
    const videosDir = path.join(process.cwd(), "public", "videos");

    // üìú Leer todos los archivos de video
    const files = fs
      .readdirSync(videosDir)
      .filter((file) => file.toLowerCase().endsWith(".mp4"));

    // üåé √Årbol oficial de categor√≠as y subcategor√≠as
    const categoryTree = {
      "Seasonal & Global Celebrations": [
        "Halloween",
        "Christmas",
        "Thanksgiving",
        "Easter",
        "New Year",
        "Independence Day",
        "July 4th",
        "Valentine‚Äôs Day",
        "St. Patrick‚Äôs Day",
        "Hanukkah",
        "Diwali",
        "Chinese New Year",
        "Mother‚Äôs Day",
        "Father‚Äôs Day",
        "Veterans Day",
        "Memorial Day",
        "Labor Day",
        "Earth Day",
        "Women‚Äôs Day",
        "Cultural Heritage",
      ],
      "Birthdays & Celebrations": [
        "Adult Birthday",
        "Kids Birthday",
        "Milestone Birthday",
        "Funny Birthday",
        "General Birthday",
      ],
      "Love, Weddings & Anniversaries": [
        "Wedding",
        "Engagement",
        "Anniversary",
        "Renewal of Vows",
        "Proposal",
        "Romantic",
        "Togetherness",
        "Inclusive Love", // üè≥Ô∏è‚Äçüåà sin mencionar Pride
      ],
      "Family & Friendship": [
        "Parents",
        "Siblings",
        "Grandparents",
        "Friendship",
        "Community",
        "Reunion",
        "General Family",
      ],
      "Babies & Parenting": [
        "Baby Shower",
        "Newborn",
        "Pregnancy",
        "Gender Reveal",
        "Adoption",
        "First Birthday",
      ],
      "Pets & Animal Lovers": [
        "Dogs",
        "Cats",
        "Birds",
        "Turtles",
        "Fish",
        "Farm Animals",
        "Wildlife",
      ],
      "Support, Healing & Care": [
        "Condolence",
        "Memorial",
        "Loss of Pet",
        "Get Well Soon",
        "Emotional Support",
        "Caregiver",
      ],
      "Everyday & Appreciation": [
        "General",
        "Encouragement",
        "Thank You",
        "Congratulations",
        "Thinking of You",
        "Just Because",
        "Good Luck",
        "Motivational",
      ],
      "Creativity & Expression": [
        "Artistic",
        "Design",
        "Cultural Festivity",
        "Crafts",
        "Visual Arts",
        "Music",
      ],
      "Diversity & Connection": [
        "Unity",
        "Equality",
        "Respect",
        "Humanity",
        "Inclusive Culture",
      ],
      "Kids & Teens": [
        "Cartoon Style",
        "Adventure",
        "Fantasy",
        "Learning",
        "Friendship",
      ],
      "Wellness & Mindful Living": [
        "Faith",
        "Hope",
        "Peace",
        "Meditation",
        "Healing",
        "Nature & Balance",
      ],
      "Life Journeys & Transitions": [
        "Graduation",
        "New Home",
        "Retirement",
        "Career Change",
        "Travel",
        "New Chapter",
      ],
    };

    // üß© Generar mapa inverso subcategor√≠a ‚Üí categor√≠a
    const categoryMap = {};
    Object.entries(categoryTree).forEach(([cat, subs]) => {
      subs.forEach((sub) => {
        categoryMap[sub.toLowerCase().replace(/[^a-z0-9]/g, "")] = cat;
      });
    });

    // üß† Leer todos los videos con datos enriquecidos
    const videos = files.map((file) => {
      const slug = file.replace(".mp4", "");
      const lower = slug.toLowerCase();

      // üè∑Ô∏è Crear nombre legible (objeto base)
      const object = slug
        .replace(/_/g, " ")
        .replace(/\b\w/g, (c) => c.toUpperCase());

      // üîé Detectar subcategor√≠a
      const subcategory =
        Object.keys(categoryMap).find((k) => lower.includes(k)) ||
        "General";

      // üß≠ Buscar categor√≠a principal
      const category = categoryMap[subcategory] || "Everyday & Appreciation";

      // üî¢ Detectar base (para grupos tipo _1A, _2A, etc.)
      const baseSlug = slug.replace(/_\d+[A-Z]?$/i, "");

      // üìÖ Fecha de actualizaci√≥n
      const updatedAt = fs.statSync(path.join(videosDir, file)).mtimeMs;

      return {
        object,
        slug,
        baseSlug,
        src: `/videos/${file}`,
        category,
        subcategory,
        updatedAt,
      };
    });

    // üßÆ Agrupar por baseSlug ‚Üí mantener solo el m√°s reciente
    const grouped = {};
    for (const v of videos) {
      if (!grouped[v.baseSlug] || grouped[v.baseSlug].updatedAt < v.updatedAt) {
        grouped[v.baseSlug] = v;
      }
    }

    // üóÇÔ∏è Resultado ordenado
    const sorted = Object.values(grouped).sort((a, b) =>
      a.object.localeCompare(b.object)
    );

    // ‚úÖ Responder JSON con todos los campos solicitados
    return new Response(
      JSON.stringify(
        {
          updatedAt: new Date().toISOString(),
          total: sorted.length,
          videos: sorted,
          categories: categoryTree,
        },
        null,
        2
      ),
      {
        headers: { "Content-Type": "application/json" },
        status: 200,
      }
    );
  } catch (error) {
    console.error("‚ùå Error leyendo videos:", error);
    return new Response(
      JSON.stringify({
        error: "Failed to load videos",
        details: error.message,
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
      }
