export const runtime = "nodejs"; // üöÄ Ejecutar en Node.js en Vercel

import fs from "fs";
import path from "path";

export async function GET() {
  try {
    // üìÇ Carpeta donde est√°n los videos
    const videosDir = path.join(process.cwd(), "public", "videos");

    // üìú Leer solo archivos .mp4
    const files = fs
      .readdirSync(videosDir)
      .filter((file) => file.toLowerCase().endsWith(".mp4"));

    // üåé √Årbol oficial de categor√≠as y subcategor√≠as
    const categoryTree = {
      "Seasonal & Global Celebrations": [
        "Halloween",
        "Christmas",
        "Thanksgiving",
        "Easter",
        "New Year",
        "Independence Day",
        "July 4th",
        "Valentine‚Äôs Day",
        "St. Patrick‚Äôs Day",
        "Hanukkah",
        "Diwali",
        "Chinese New Year",
        "Mother‚Äôs Day",
        "Father‚Äôs Day",
        "Veterans Day",
        "Memorial Day",
        "Labor Day",
        "Earth Day",
        "Women‚Äôs Day",
        "Cultural Heritage",
      ],
      "Birthdays & Celebrations": [
        "Adult Birthday",
        "Kids Birthday",
        "Milestone Birthday",
        "Funny Birthday",
        "General Birthday",
      ],
      "Love, Weddings & Anniversaries": [
        "Wedding",
        "Engagement",
        "Anniversary",
        "Renewal of Vows",
        "Proposal",
        "Romantic",
        "Togetherness",
        "Inclusive Love", // üåà sin mencionar Pride directamente
      ],
      "Family & Friendship": [
        "Parents",
        "Siblings",
        "Grandparents",
        "Friendship",
        "Community",
        "Reunion",
        "General Family",
      ],
      "Babies & Parenting": [
        "Baby Shower",
        "Newborn",
        "Pregnancy",
        "Gender Reveal",
        "Adoption",
        "First Birthday",
      ],
      "Pets & Animal Lovers": [
        "Dogs",
        "Cats",
        "Birds",
        "Turtles",
        "Fish",
        "Farm Animals",
        "Wildlife",
      ],
      "Support, Healing & Care": [
        "Condolence",
        "Memorial",
        "Loss of Pet",
        "Get Well Soon",
        "Emotional Support",
        "Caregiver",
      ],
      "Everyday & Appreciation": [
        "General",
        "Encouragement",
        "Thank You",
        "Congratulations",
        "Thinking of You",
        "Just Because",
        "Good Luck",
        "Motivational",
      ],
      "Creativity & Expression": [
        "Artistic",
        "Design",
        "Cultural Festivity",
        "Crafts",
        "Visual Arts",
        "Music",
      ],
      "Diversity & Connection": [
        "Unity",
        "Equality",
        "Respect",
        "Humanity",
        "Inclusive Culture",
      ],
      "Kids & Teens": [
        "Cartoon Style",
        "Adventure",
        "Fantasy",
        "Learning",
        "Friendship",
      ],
      "Wellness & Mindful Living": [
        "Faith",
        "Hope",
        "Peace",
        "Meditation",
        "Healing",
        "Nature & Balance",
      ],
      "Life Journeys & Transitions": [
        "Graduation",
        "New Home",
        "Retirement",
        "Career Change",
        "Travel",
        "New Chapter",
      ],
    };

    // üß© Mapa inverso para detectar categor√≠a a partir del nombre del archivo
    const categoryMap = {};
    Object.entries(categoryTree).forEach(([cat, subs]) => {
      subs.forEach((sub) => {
        categoryMap[sub.toLowerCase().replace(/[^a-z0-9]/g, "")] = cat;
      });
    });

    // üß† Procesar todos los videos
    const allVideos = files.map((file) => {
      const slug = file.replace(".mp4", "");
      const title = slug
        .replace(/_/g, " ")
        .replace(/\b\w/g, (c) => c.toUpperCase());
      const lower = slug.toLowerCase();

      // üß© Detectar subcategor√≠a por coincidencia
      const subcategory =
        Object.keys(categoryMap).find((k) => lower.includes(k)) || "General";
      const category = categoryMap[subcategory] || "Everyday & Appreciation";

      // Agrupar variantes tipo ‚Äú1A‚Äù, ‚Äú2A‚Äù
      const baseSlug = slug.replace(/_\d+[A-Z]?$/i, "");

      return {
        title,
        slug,
        baseSlug,
        src: `/videos/${file}`,
        category,
        subcategory,
        updatedAt: fs.statSync(path.join(videosDir, file)).mtimeMs,
      };
    });

    // üßÆ Agrupar por baseSlug ‚Üí mantener solo la versi√≥n m√°s reciente
    const grouped = {};
    for (const v of allVideos) {
      const key = v.baseSlug;
      if (!grouped[key] || grouped[key].updatedAt < v.updatedAt) {
        grouped[key] = v;
      }
    }

    // üéØ Seleccionar las 10 m√°s recientes / actualizadas
    const top10 = Object.values(grouped)
      .sort((a, b) => b.updatedAt - a.updatedAt)
      .slice(0, 10);

    // ‚úÖ Respuesta final
    return new Response(
      JSON.stringify(
        {
          videos: top10,
          categories: categoryTree,
          updatedAt: new Date().toISOString(),
        },
        null,
        2
      ),
      {
        headers: {
          "Content-Type": "application/json",
          "Cache-Control": "no-store",
        },
        status: 200,
      }
    );
  } catch (error) {
    console.error("‚ùå Error leyendo videos:", error);
    return new Response(
      JSON.stringify({
        error: "Failed to load videos",
        details: error.message,
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
        }
