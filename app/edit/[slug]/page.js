"use client";
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { motion } from "framer-motion";

// üíå Mensaje autom√°tico seg√∫n slug
function defaultMessageFromSlug(slug) {
  const s = (slug || "").toLowerCase();
  if (/christmas|navidad/.test(s))
    return "May your days be merry, bright, and filled with love. üéÑ‚ú®";
  if (/halloween/.test(s) && /love/.test(s))
    return "Between scares and sighs, my heart still chooses you. üñ§üéÉ";
  if (/halloween/.test(s))
    return "Wishing you a spook-tacular night full of magic and candy! üëªüç¨";
  if (/thanksgiving/.test(s))
    return "Grateful for every blessing and every smile. ü¶ÉüçÅ";
  if (/birthday/.test(s))
    return "Happy Birthday! Wishing you joy, laughter, and sweet surprises. üéâüéÇ";
  if (/love|valentine/.test(s))
    return "Thank you for existing. Let love‚Äôs magic wrap around you today. üíñ";
  if (/condolence|loss|memory|funeral/.test(s))
    return "May peace and love comfort your heart today and always. üïäÔ∏èü§ç";
  if (/independence|july|usa/.test(s))
    return "Celebrate freedom and unity. Happy Independence Day! üá∫üá∏üéÜ";
  if (/easter|bunny/.test(s))
    return "Let joy and renewal bloom within you. üê∞üå∏";
  if (/newyear|year/.test(s))
    return "A fresh start, new dreams, and endless joy. ‚ú®üéÜ";
  return "Celebrate this moment with a smile. Wishing you peace and light. ‚ú®";
}

// üéá Conjunto de animaciones seg√∫n categor√≠a
function getAnimationsForSlug(slug) {
  const s = slug.toLowerCase();
  if (/christmas|navidad/.test(s))
    return ["üéÑ Snow Glow", "üéÅ Santa Spark", "‚ú® Twinkle Lights", "‚ùÑÔ∏è Snowfall", "üïØÔ∏è Candle Light", "üéÖ Gift Pop", "üåü Star Shine", "üí´ Magic Dust", "üß¶ Cozy Socks", "üîî Jingle Bells"];
  if (/halloween/.test(s))
    return ["üéÉ Pumpkin Glow", "üëª Ghost Drift", "üï∏Ô∏è Web Fall", "üßô‚Äç‚ôÄÔ∏è Witch Dust", "ü¶á Bat Flight", "ü™Ñ Spark Potion", "üíÄ Skull Flicker", "üïØÔ∏è Candle Mist", "üåï Moonlight Fade", "üç¨ Candy Rain"];
  if (/thanksgiving/.test(s))
    return ["ü¶É Turkey Glow", "üçÇ Leaf Drift", "üçÅ Fall Wind", "üïØÔ∏è Warm Light", "ü•ß Pie Puff", "üåª Harvest Bloom", "üçó Feast Fade", "üåæ Grain Wave", "üçÉ Gentle Breeze", "üî• Hearth Flicker"];
  if (/birthday/.test(s))
    return ["üéâ Confetti Burst", "üéÇ Cake Spark", "üéà Balloon Rise", "‚ú® Glitter Pop", "üéä Party Stream", "üíù Ribbon Glow", "üåà Color Rain", "üéÅ Gift Slide", "ü™© Disco Spin", "ü•≥ Smile Twirl"];
  if (/love|valentine/.test(s))
    return ["üíñ Floating Hearts", "üíò Cupid Spark", "üíû Pink Glow", "üåπ Rose Fall", "üíã Kiss Burst", "‚ú® Soft Sparkle", "üå∏ Bloom Fade", "üíï Heart Trail", "üí´ Romantic Dust", "üïØÔ∏è Candle Flicker"];
  if (/condolence|loss|memory|funeral/.test(s))
    return ["üïäÔ∏è Dove Flight", "üåø Leaf Drift", "üåßÔ∏è Soft Rain", "üí´ Gentle Light", "üå∏ Petal Fall", "‚ú® Peace Glow", "üåô Moon Fade", "ü™∂ Feather Drift", "üïØÔ∏è Candle Calm", "üåæ Serenity Wave"];
  if (/independence|july|usa/.test(s))
    return ["üá∫üá∏ Flag Wave", "üéÜ Firework Burst", "‚ú® Star Spark", "üóΩ Liberty Glow", "üéá Light Rain", "üî• Spark Trail", "üí´ Freedom Beam", "üéâ RedWhiteBlue", "üåü Sky Flash", "ü¶Ö Eagle Sweep"];
  if (/easter|bunny/.test(s))
    return ["üê∞ Hop Trail", "üå∏ Flower Bloom", "üåº Petal Pop", "ü•ö Egg Jump", "üå∑ Spring Glow", "‚ú® Gentle Sparkle", "‚òÄÔ∏è Morning Shine", "üïäÔ∏è Dove Peace", "üíê Joy Spread", "üçÉ Fresh Air"];
  if (/newyear|year/.test(s))
    return ["üéÜ Fireworks", "‚ú® Glitter Burst", "üéá Star Rain", "üåü Spark Trail", "üéâ Pop Stream", "üçæ Champagne Rise", "üí´ Midnight Glow", "üïõ Clock Flash", "üéä Joy Burst", "üåà New Dawn"];
  return ["‚ú® Sparkles", "üéâ Confetti", "üíñ Hearts", "üå∏ Bloom", "üåü Shine", "üïäÔ∏è Peace", "üåà Glow", "üí´ Dust", "üéá Light", "‚ùå None"];
}

export default function EditPage() {
  const { slug } = useParams();
  const [item, setItem] = useState(null);
  const [message, setMessage] = useState("");
  const [anim, setAnim] = useState("");
  const [animOptions, setAnimOptions] = useState([]);
  const [showEdit, setShowEdit] = useState(false);
  const [progress, setProgress] = useState(0);
  const [showGiftPopup, setShowGiftPopup] = useState(false);
  const [giftSelection, setGiftSelection] = useState({ brand: "", amount: 0 });
  const [showCheckout, setShowCheckout] = useState(false);
  const CARD_PRICE = 5;

  // üîπ Pantalla inicial con barra de progreso
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch("/api/videos", { cache: "no-store" });
        const list = await res.json();
        const found = list.find((v) => v.slug === slug);
        setItem(found || null);
        setMessage(defaultMessageFromSlug(slug));
        setAnimOptions(getAnimationsForSlug(slug));
        setAnim(getAnimationsForSlug(slug)[0]); // animaci√≥n inicial

        const el = document.documentElement;
        if (el.requestFullscreen) el.requestFullscreen().catch(() => {});
        const start = performance.now();
        const duration = 3000;

        const tick = () => {
          const p = Math.min(1, (performance.now() - start) / duration);
          setProgress(Math.round(p * 100));
          if (p < 1) requestAnimationFrame(tick);
        };
        requestAnimationFrame(tick);

        setTimeout(async () => {
          if (document.fullscreenElement) await document.exitFullscreen();
          setShowEdit(true);
        }, 3000);
      } catch {
        setShowEdit(true);
      }
    })();
  }, [slug]);

  // ‚ú® Render animaci√≥n seleccionada
  const renderEffect = () => {
    if (!anim || anim.includes("None")) return null;
    const emoji = anim.split(" ")[0];
    return Array.from({ length: 20 }).map((_, i) => (
      <motion.span
        key={i}
        className="absolute text-xl z-[40]"
        initial={{ opacity: 0, y: 0 }}
        animate={{
          opacity: [0, 1, 0],
          y: [0, -120],
          x: [0, Math.random() * 120 - 60],
          scale: [0.8, 1.2, 0],
        }}
        transition={{
          duration: 3 + Math.random() * 2,
          repeat: Infinity,
          delay: i * 0.25,
        }}
        style={{
          top: `${Math.random() * 100}%`,
          left: `${Math.random() * 100}%`,
        }}
      >
        {emoji}
      </motion.span>
    ));
  };

  // üñºÔ∏è Pantalla inicial
  if (!showEdit)
    return (
      <div className="fixed inset-0 flex justify-center items-center bg-black">
        <div className="absolute bottom-0 left-0 right-0 h-1 bg-white/30">
          <div className="h-full bg-white transition-all" style={{ width: `${progress}%` }} />
        </div>
        {item?.src ? (
          item.src.endsWith(".mp4") ? (
            <video src={item.src} autoPlay muted loop playsInline className="w-full h-full object-cover" />
          ) : (
            <img src={item.src} alt={slug} className="w-full h-full object-cover" />
          )
        ) : null}
      </div>
    );

  // üå∏ Edici√≥n
  return (
    <main className="mx-auto max-w-3xl px-4 py-8 relative bg-[#fff8f5] min-h-screen overflow-hidden">
      {/* Animaci√≥n activa */}
      <div className="absolute inset-0 pointer-events-none">{renderEffect()}</div>

      <div className="relative z-20">
        {/* Imagen o video */}
        <div className="relative w-full rounded-3xl shadow-md overflow-hidden bg-white">
          {item?.src?.endsWith(".mp4") ? (
            <video src={item.src} muted loop autoPlay playsInline className="w-full h-[420px] object-contain" />
          ) : (
            <img src={item.src} alt={slug} className="w-full h-[420px] object-contain" />
          )}
        </div>

        {/* Mensaje + animaciones + botones */}
        <section className="mt-6 bg-white rounded-3xl shadow-md p-6">
          <h2 className="text-xl font-semibold text-center mb-4">Customize your message ‚ú®</h2>
          <textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            rows={3}
            className="w-full rounded-2xl border border-gray-300 p-4 text-center focus:ring-2 focus:ring-pink-400"
          />

          {/* Dropdown din√°mico */}
          <select
            value={anim}
            onChange={(e) => setAnim(e.target.value)}
            className="w-full mt-3 rounded-2xl border border-gray-300 p-3 text-center focus:ring-2 focus:ring-pink-400"
          >
            {animOptions.map((a, i) => (
              <option key={i} value={a}>
                {a}
              </option>
            ))}
            <option value="‚ùå None">‚ùå None</option>
          </select>

          {/* Botones */}
          <div className="flex justify-between mt-4">
            <button
              onClick={() => setShowGiftPopup(true)}
              className="w-[48%] rounded-full py-3 font-semibold transition text-[#3b2b1f]"
              style={{ backgroundColor: "#FFD966" }}
            >
              üéÅ Choose Gift Card
            </button>
            <button
              onClick={() => setShowCheckout(true)}
              className="w-[48%] bg-[#b89cff] hover:bg-[#9c7ff9] text-white font-semibold py-3 rounded-full transition"
            >
              Checkout üíú
            </button>
          </div>
        </section>
      </div>
    </main>
  );
            }
